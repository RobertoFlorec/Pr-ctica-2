/**
	\file
	\brief
		This is the starter file of FlexTimer.
		In this file the FlexTimer is configured in overflow mode.
	\author J. Luis Pizano Escalante, luispizano@iteso.mx
	\date	7/09/2014
	\todo
	    Add configuration structures.
 */

#include "FlexTimer.h"
#include "MK64F12.h"
#include "GPIO.h"

void FTM0_ISR()
{
	FTM0->SC &= ~FLEX_TIMER_TOF;
	GPIOD->PDOR ^= 0xFF;
}

void FlexTimer_updateCHValue(sint16 channelValue)
{
	/**Assigns a new value for the duty cycle*/
	FTM0->CONTROLS[5].CnV = channelValue;
}

void FlexTimer_Init()
{
	/** Clock gating for the FlexTimer 0*/
		SIM->SCGC6 |= FLEX_TIMER_0_CLOCK_GATING;
		/**When write protection is enabled (WPDIS = 0), write protected bits cannot be written.
		* When write protection is disabled (WPDIS = 1), write protected bits can be written.*/
		FTM0->MODE |= FTM_MODE_WPDIS_MASK;
		/**Enables the writing over all registers*/
		FTM0->MODE &= ~FTM_MODE_FTMEN_MASK;
		/**Assigning a default value for modulo register*/
		FTM0->MOD = 0x00FF & FTM_MOD_MOD_MASK;
		/**Selects the Edge-Aligned PWM mode mode*/
		FTM0->CONTROLS[5].CnSC =  FTM_CnSC_MSB_MASK | FTM_CnSC_ELSB_MASK;
		/**Assign a duty cycle of 50%*/
		FTM0->CONTROLS[5].CnV = 219 & FTM_CnV_VAL_MASK;
		/**Configure the times*/
		FTM0->SC |=((1<<FTM_SC_CLKS_SHIFT)&(FTM_SC_CLKS_MASK));

		FTM0->SC |= FLEX_TIMER_PS_128 & (FTM_SC_PS_MASK) ;
}

void PWMInit(void){
	FlexTimer_Init();
	GPIO_clockGating(GPIO_A);
	GPIO_pinControlRegisterType pinControlRegisterPWM = GPIO_MUX3 ;
	GPIO_pinControlRegister(GPIO_A, BIT0, &pinControlRegisterPWM);
}

sint16 incrementaPWM(sint16 dutyCycle){
	dutyCycle=dutyCycle+9;
	if(dutyCycle > 255){
		dutyCycle = 255;
	}
	return dutyCycle;
}

sint16 decrementaPWM(sint16 dutyCycle){
	dutyCycle = dutyCycle-9;
	if(dutyCycle < 85){
		dutyCycle = 85;
	}
	return dutyCycle;
}
